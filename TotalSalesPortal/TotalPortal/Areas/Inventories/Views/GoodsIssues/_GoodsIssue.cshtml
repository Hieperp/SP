@model TotalPortal.Areas.Inventories.ViewModels.GoodsIssueViewModel


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    @Html.HiddenFor(model => model.GoodsIssueID)
    @Html.HiddenFor(model => model.TotalQuantity)
    @Html.HiddenFor(model => model.TotalFreeQuantity)
    @Html.HiddenFor(model => model.TotalAmount)
    @Html.HiddenFor(model => model.TotalVATAmount)
    @Html.HiddenFor(model => model.TotalGrossAmount)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSeactionA.cshtml")

        <div class="form-group">
            @Html.EditorFor(d => d.Employee)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeliveryDate)
            <div class="div-input">
                @Html.Kendo().DatePickerFor(model => model.DeliveryDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
            </div>
        </div>


    </div>

    <div class="right-panel">

        <div style="clear: both; height: 136px;">
            @Html.EditorFor(d => d.Customer)
        </div>




        @Html.HiddenFor(model => model.DeliveryAdviceID)
        @*<div class="contract-separator">
                @if (Model.DeliveryAdviceID == 0 || Model.DeliveryAdviceID == null)
                {
                    @Html.Partial("~/Views/Purchases/_NoOrderInvoice.cshtml")}
                else
                {
                    @Html.Partial("~/Views/Purchases/_OrderInvoice.cshtml")
                }
            </div>*@


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.GoodsIssueViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {
                    columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                    columns.Bound(p => p.GoodsIssueDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= GoodsIssueDetailID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueDetailID' value='#= GoodsIssueDetailID #' />");
                    columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= GoodsIssueID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueID' value='#= GoodsIssueID #' />");
                    columns.Bound(p => p.DeliveryAdviceID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= DeliveryAdviceID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceID' value='#= DeliveryAdviceID #' />");
                    columns.Bound(p => p.DeliveryAdviceDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= DeliveryAdviceDetailID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceDetailID' value='#= DeliveryAdviceDetailID #' />");

                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(180)
                        .ClientFooterTemplate("Tổng cộng:")
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                    columns.Bound(p => p.WarehouseID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= WarehouseID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].WarehouseID' value='#= WarehouseID #' />");
                    columns.Bound(p => p.WarehouseCode).DisplayNameTitle().Filterable(false).Width(80)
                        .ClientTemplate("#= WarehouseCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].WarehouseCode' value='#= WarehouseCode #' />");


                    columns.Bound(p => p.QuantityAvailable).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', QuantityAvailable) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].QuantityAvailable' value='#= QuantityAvailable #' />");

                    columns.Bound(p => p.ControlFreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ControlFreeQuantity) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].ControlFreeQuantity' value='#= ControlFreeQuantity #' />");
                    
                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= QuantityRemains #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.FreeQuantityRemains).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= FreeQuantityRemains #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].FreeQuantityRemains' value='#= FreeQuantityRemains #' />");
                    columns.Bound(p => p.FreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', FreeQuantity) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].FreeQuantity' value='#= FreeQuantity #' />");
                    

                    columns.Bound(p => p.GoodsIssueTypeID).DisplayNameTitle().Filterable(false).Hidden()                        
                        .ClientTemplate("#= (GoodsIssueTypeID == null) ? '' : GoodsIssueTypeID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueTypeID' value='#= (GoodsIssueTypeID == null) ? '' : GoodsIssueTypeID #' />");
                    columns.Bound(p => p.GoodsIssueTypeCode).DisplayNameTitle().Filterable(false).Hidden()  
                        .ClientTemplate("#= (GoodsIssueTypeCode == null) ? '' : GoodsIssueTypeCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueTypeCode' value='#= (GoodsIssueTypeCode == null) ? '' : GoodsIssueTypeCode #' />");
                    columns.Bound(p => p.GoodsIssueTypeName).DisplayNameTitle().Filterable(false).Width(250).HtmlAttributes(new { @class = "isBonus" })
                        .ClientTemplate("#= (GoodsIssueTypeName == null) ? '' : GoodsIssueTypeName #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueTypeName' value='#= (GoodsIssueTypeName == null) ? '' : GoodsIssueTypeName #' />");
                    columns.Bound(p => p.GoodsIssueClassID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (GoodsIssueClassID == null) ? '' : GoodsIssueClassID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueClassID' value='#= (GoodsIssueClassID == null) ? '' : GoodsIssueClassID #' />");
                    
                    columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                    columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Hidden().HtmlAttributes(new { @class = "grid-number-column" })
                        .Format("{0:n1}%")
                        .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                        .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                    columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                    columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                    columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                    columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                    columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");


                    columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");

                    //columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                })
                .Filterable()
                .Navigatable()

                .ToolBar(toolbar =>
                {
                    if (Model.Editable)
                    {
                        toolbar.Custom().Text("Xuất tất cả theo đề nghị giao hàng").Url("#").HtmlAttributes(new { onclick = "copyRemainsToQuantity()" });
                    }
                    else
                    {//Add a functionless button for display purpose only
                        toolbar.Template(
                            @<text>
                                <div>
                                    @(Html.Kendo().Button()
                                                        .Name("iconButton")
                                                        .HtmlAttributes(new { type = "button" })
                                                        .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                    )
                                </div>
                            </text>);
                    }
                })

                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })
                .Events(events =>
                {
                    events.DataBinding(@<text>function(e){rowNumber = 0;} </text>);

                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.GoodsIssueDetailID);
                        model.Field(m => m.GoodsIssueDetailID).DefaultValue(0);
                        model.Field(m => m.GoodsIssueID).DefaultValue(@Model.GoodsIssueID);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.QuantityAvailable).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantity).Sum())
                    .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                    .Aggregates(a => a.Add(x => x.Amount).Sum())
                    .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                    .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>

                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button id="closedSubmitButton" type="submit" formaction="@Url.Action("Edit", "GoodsIssues")" class="k-button custom-button"> <img src="~/Content/Images/New/save-icon.png" alt="" /> Lưu phiếu </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}

<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>