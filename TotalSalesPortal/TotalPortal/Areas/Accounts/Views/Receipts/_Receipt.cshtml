@using TotalPortal.Configuration
@model TotalPortal.Areas.Accounts.ViewModels.ReceiptViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div id="popupWindow"></div>

        <div class="div-main">



            @Html.HiddenFor(model => model.GoodsIssueID)
            @Html.HiddenFor(model => model.GoodsIssueEntryDate)




            @Html.HiddenFor(model => model.ReceiptID)
            @Html.HiddenFor(model => model.TotalReceiptAmount)
            @Html.HiddenFor(model => model.TotalCashDiscount)
            @Html.HiddenFor(model => model.TotalFluctuationAmount)
            @Html.HiddenFor(model => model.TotalDepositAmount)

            @Html.HiddenFor(model => model.SubmitTypeOption)

            <div class="div-left">

                <div class="form-group1">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EntryDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Reference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.PostDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DatePickerFor(model => model.PostDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.PostDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.EditorFor(d => d.Employee)
                    @Html.ValidationMessageFor(model => model.Employee.Name, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="div-right">
                <div class="contract-separator">
                    @Html.EditorFor(d => d.Customer)
                </div>

                @*<div class="contract-separator">
                        @if (Model.GoodsIssueID == 0 || Model.GoodsIssueID == null)
                        {
                            @Html.Partial("~/Views/Purchases/_NoOrderInvoice.cshtml")}
                        else
                        {
                            @Html.Partial("~/Views/Purchases/_OrderInvoice.cshtml")
                        }
                    </div>*@
                <div>

                    @(Html.Kendo().Grid(Model.ReceiptViewDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.ReceiptDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= ReceiptDetailID #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].ReceiptDetailID' value='#= ReceiptDetailID #' />");
                            columns.Bound(p => p.ReceiptID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= ReceiptID #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].ReceiptID' value='#= ReceiptID #' />");
                            columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= GoodsIssueID #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].GoodsIssueID' value='#= GoodsIssueID #' />");
                            columns.Bound(p => p.CustomerID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CustomerID #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].CustomerID' value='#= CustomerID #' />");

                            
                            columns.Bound(p => p.GoodsIssueReference).DisplayNameTitle().Filterable(false).Width(90)
                                .ClientTemplate("#= GoodsIssueReference #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].GoodsIssueReference' value='#= GoodsIssueReference #' />")
                                .ClientFooterTemplate("Tổng cộng:");
                            columns.Bound(p => p.GoodsIssueEntryDate).DisplayNameTitle().Filterable(false)
                                .ClientTemplate("#= GoodsIssueEntryDate ? kendo.toString(kendo.parseDate(GoodsIssueEntryDate), '" + SettingsManager.DateTimeFormat + "') : '' #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].GoodsIssueEntryDate' value='#= kendo.toString(GoodsIssueEntryDate, '" + SettingsManager.DateTimeFormat + "') #' />");

                            columns.Bound(p => p.AmountDue).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', AmountDue) #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].AmountDue' value='#= AmountDue #' />");
                            columns.Bound(p => p.CashDiscount).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= CashDiscount #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].CashDiscount' value='#= CashDiscount #' />");
                            columns.Bound(p => p.ReceiptAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', ReceiptAmount) #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].ReceiptAmount' value='#= ReceiptAmount #' />");
                            
                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='ReceiptViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()

                        .ToolBar(toolbar =>
                        {
                            //Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                                    .Name("iconButton")
                                                    .HtmlAttributes(new { type = "button" })
                                                    .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text>function(e){rowNumber = 0;} </text>);

                        }).DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.ReceiptDetailID);
                                model.Field(m => m.ReceiptDetailID).DefaultValue(0);
                                model.Field(m => m.ReceiptID).DefaultValue(@Model.ReceiptID);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.AmountDue).Sum())
                            .Aggregates(a => a.Add(x => x.CashDiscount).Sum())                                                        
                            .Aggregates(a => a.Add(x => x.FluctuationAmount).Sum())
                            .Aggregates(a => a.Add(x => x.ReceiptAmount).Sum())
                        )
                    )

                </div>

                <div class="panel-div">
                    @(Html.Kendo().PanelBar()
                    .Name("IntroPanelBar")
                    .Items(items =>
                    {
                        items.Add()
                            .Text("Thông tin khác")
                            .Selected(true)
                            .Expanded(false)
                            .Content(@<text>
                                <div class="div-panel-left">
                                    <div class="div-row">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label1" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class1" })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="div-row">
                                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                        </div>
                                        <div class="div-validation-message">
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="div-panel-right">
                                    @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                    @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                                </div>

                            </text>).HtmlAttributes(new { @class = "panel-class" });
                    })
                    )
                </div>

            </div>


            <div class="div-button">
                @if (Model.Editable)
                {
                    <input id="closedSubmitButton" type="submit" formaction="@Url.Action("Edit", "Receipts")" value="Save" class="k-button custom-button" />
                    <input id="submitCreateWizard" style="display:none" type="submit" formaction="@Url.Action("Edit", "Receipts")" class="k-button custom-button cancel" />
                }
            </div>
            @Html.Partial("~/Views/Helpers/Bases/_ViewHeader.cshtml")
        </div>
    }
</div>


<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>