@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Sales.ViewModels.DeliveryAdviceViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div id="popupWindow"></div>

        @Html.HiddenFor(model => model.DeliveryAdviceID)
        @Html.HiddenFor(model => model.TotalQuantity)
        @Html.HiddenFor(model => model.TotalAmount)
        @Html.HiddenFor(model => model.TotalVATAmount)
        @Html.HiddenFor(model => model.TotalGrossAmount)
        @Html.HiddenFor(model => model.AverageDiscountPercent)

        @Html.HiddenFor(model => model.SubmitTypeOption)


        <div class="div-main">

            <div class="div-left">

                @Html.Partial("~/Views/Helpers/Bases/_BaseSeactionA.cshtml")

                <div class="form-group1">
                    @Html.EditorFor(d => d.Employee)
                    @Html.ValidationMessageFor(model => model.Employee.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group1">
                    @Html.EditorFor(d => d.Promotion)
                </div>
                <div class="form-group1">
                    @Html.LabelFor(model => model.PromotionVouchers, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.PromotionVouchers).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.PromotionVouchers, "", new { @class = "text-danger" })
                    </div>
                </div>


                @Html.HiddenFor(model => model.SalesOrderID)
                <div class="form-group1">
                    @Html.LabelFor(model => model.SalesOrderEntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.SalesOrderEntryDate).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.SalesOrderEntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.SalesOrderReference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.SalesOrderReference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.SalesOrderReference, "", new { @class = "text-danger" })
                    </div>
                </div>



                @Html.HiddenFor(model => model.PriceCategoryID)               
                <div class="form-group1">
                    @Html.LabelFor(model => model.PriceCategoryName, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.PriceCategoryName).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.PriceCategoryName, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="div-right">
                <div class="contract-separator">
                    @Html.EditorFor(d => d.Customer, "AutoCompletes/CustomerBase")
                </div>




                <div>
                    @(Html.Kendo().Grid(Model.DeliveryAdviceViewDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.DeliveryAdviceDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= DeliveryAdviceDetailID #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].DeliveryAdviceDetailID' value='#= DeliveryAdviceDetailID #' />");
                            columns.Bound(p => p.DeliveryAdviceID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= DeliveryAdviceID #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].DeliveryAdviceID' value='#= DeliveryAdviceID #' />");


                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(200)
                                .ClientFooterTemplate("Tổng cộng:")
                                .ClientTemplate("<div class = 'multiline-grid'> #= CommodityName #</div>" +
                                        "<div> #= CommodityCode # #= '[' ##= WarehouseCode ##= ']' #</div>" +
                                        "<div class = 'isBonus'> #= (IsBonus == true) ? '[Quà tặng]' : '' #</div>" +
                                        "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                            columns.Bound(p => p.WarehouseID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= WarehouseID #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].WarehouseID' value='#= WarehouseID #' />");
                            columns.Bound(p => p.WarehouseCode).DisplayNameTitle().Filterable(false).Width(120).Hidden()
                                .ClientTemplate("#= WarehouseCode #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].WarehouseCode' value='#= WarehouseCode #' />");


                            columns.Bound(p => p.QuantityAvailable).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', QuantityAvailable) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].QuantityAvailable' value='#= QuantityAvailable #' />");
                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                            columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                               .Format("{0:n1}%")
                               .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                               .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                            columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");


                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='DeliveryAdviceViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()

                        .ToolBar(toolbar =>
                        {
                            if (Model.Editable)
                            {
                                toolbar.Create();
                                if (Model.SalesOrderID != null)
                                    toolbar.Custom().Text("Add From SalesOrder").Url("#").HtmlAttributes(new { onclick = "GetSalesOrderDetails()" });
                            }
                            else
                            {//Add a functionless button for display purpose only
                                toolbar.Template(
                                    @<text>
                                        <div>
                                            @(Html.Kendo().Button()
                                                .Name("iconButton")
                                                .HtmlAttributes(new { type = "button" })
                                                .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                            )
                                        </div>
                                    </text>);
                            }
                        })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text>
                                function(e) {
                                rowNumber = 0;
                                }
                            </text>);
                        @*events.DataBound(@<text>
                                function(e) {
                                    var grid = $("#kendoGridDetails").data("kendoGrid");
                                    var data = grid.dataSource.data();
                                    $.each(data, function (i, row) {
                                        var isWarrantyClaim = row.IsWarrantyClaim;
                                        if (isWarrantyClaim == true) {
                                            $('tr[data-uid="' + row.uid + '"]').css("color", "darkred");
                                        }
                                    });
                                }
                            </text>);*@
                        }).DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .ServerOperation(false)
                                .Model(model =>
                                {
                                    model.Id(x => x.DeliveryAdviceDetailID);
                                    model.Field(m => m.DeliveryAdviceDetailID).DefaultValue(0);
                                    model.Field(m => m.DeliveryAdviceID).DefaultValue(@Model.DeliveryAdviceID);
                                })
                                .Events(events =>
                                {
                                    events.Error("kendGrid_ErrorHandler");
                                })
                                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                                .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                                .Aggregates(a => a.Add(x => x.Amount).Sum())
                                .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                                .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                            )
                    )






                    <div class="panel-div">
                        @(Html.Kendo().PanelBar()
                            .Name("IntroPanelBar")
                            .Items(items =>
                            {
                                items.Add()
                                    .Text("Thông tin khác")
                                    .Selected(true)
                                    .Expanded(false)
                                    .Content(@<text>
                                        <div class="div-panel-left">
                                            @*<div class="div-row"> Comment out: muc dich: bot so field ben trai, can doi 2 ben cho bang nhau so field -> cho dep ma thoi. Neu sau nay can show field: Description thi cu viec show len thoi
                                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>*@

                                            <div class="div-row">
                                                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                                <div class="div-input">
                                                    @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                                </div>
                                                <div class="div-validation-message">
                                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PaymentTerm.cshtml")
                                        </div>
                                        <div class="div-panel-right">
                                            @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                            @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                                        </div>

                                    </text>).HtmlAttributes(new { @class = "panel-class" });
                            })
                        )
                    </div>




                </div>


            </div>


            <div class="div-button">
                @if (Model.Editable)
                {
                    @Html.HiddenFor(model => model.PrintAfterClosedSubmit)
                    <button id="closedSubmitButton" type="submit" formaction="@Url.Action("Edit", "DeliveryAdvices")" class="k-button custom-button"> <img src="~/Content/Images/New/save-icon.png" alt="" /> Lưu phiếu </button>
                    <button id="closedSubmitButton_NMVN" type="submit" onclick="$('#PrintAfterClosedSubmit').val(true);" formaction="@Url.Action("Edit", "DeliveryAdvices")" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In HĐ bán lẻ</button>

                    <input id="submitCreateWizard" style="display:none" type="submit" formaction="@Url.Action("Edit", "DeliveryAdvices")" class="k-button custom-button cancel" />

                    <input id="submitEditServiceContract" style="display:none" type="submit" formaction="@Url.Action("EditServiceContract", "ServicesInvoices")" class="k-button custom-button" />
                }
                else
                {
                    <button formaction="@Url.Action("Print", "DeliveryAdvices", new { id = @Model.DeliveryAdviceID })" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In HĐ bán lẻ </button>
                }
            </div>
            @Html.Partial("~/Views/Helpers/Bases/_ViewHeader.cshtml")

        </div>
    }

</div>
<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetSalesOrderDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetSalesOrderDetails", "ServicesInvoices")", "Chọn dịch vụ", "900px", "413px");
        });
    }

</script>

